{"ast":null,"code":"var _jsxFileName = \"/home/lenovo/Downloads/react-Wowcher-Test-v2.0/react-Wowcher-Test/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport \"./App.css\";\n\nconst formatNumber = number => new Intl.NumberFormat(\"en\", {\n  minimumFractionDigits: 2\n}).format(number);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchSpace = event => {\n      let keyword = event.target.value;\n      this.setState({\n        search: keyword\n      });\n    };\n\n    this.state = {\n      products: [],\n      search: null\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([fetch('api/branch1.json'), fetch('api/branch2.json'), fetch('api/branch3.json')]).then(function (responses) {\n      // Get a JSON object from each of the responses\n      return Promise.all(responses.map(function (response) {\n        return response.json();\n      }));\n    }).then(data => {\n      // Log the data to the console\n      // You would do something with both sets of data here\n      this.setState({\n        products: data\n      });\n      console.log('data', data);\n      console.log('products', this.state.products);\n    }).catch(function (error) {\n      // if there's an error, log it\n      console.log('error', error);\n    });\n  }\n\n  render() {\n    const products = this.state;\n    const ProductTotal = products.products.filter(data => {\n      if (this.state.search == null) return data;else if (data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n        return data;\n      }\n    }).reduce((totalProducts, product) => totalProducts + product.unitPrice, 0);\n    console.log('total', ProductTotal);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"product-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, \"Search Products\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.searchSpace(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, \"Product\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, \"Revenue\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"tfoot\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, \"Total\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, ProductTotal)))), products.products.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, item.products.map((c, i) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, c.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, c.unitPrice))))));\n  }\n\n}\n\nexport default App; // {\n//   this.state.todos && \n//   Object.keys(icon).map(function (element) {\n//      return <tr>\n//        <td>{element}</td>\n//        <td>{icon[element]}</td>\n//      </tr>;\n//     })\n// }\n/////////////\n// {products.products.map(image => <div>{image.name}</div>)}\n//    .filter((data)=>{\n//       if(this.state.search == null)\n//         return data\n//       else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n//         return data\n// }\n// }).","map":{"version":3,"sources":["/home/lenovo/Downloads/react-Wowcher-Test-v2.0/react-Wowcher-Test/src/App.js"],"names":["React","Component","axios","formatNumber","number","Intl","NumberFormat","minimumFractionDigits","format","App","constructor","props","searchSpace","event","keyword","target","value","setState","search","state","products","componentDidMount","Promise","all","fetch","then","responses","map","response","json","data","console","log","catch","error","render","ProductTotal","filter","name","toLowerCase","includes","reduce","totalProducts","product","unitPrice","e","item","index","c","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\nimport \"./App.css\";\n\nconst formatNumber = (number) => new Intl.NumberFormat(\"en\", { minimumFractionDigits: 2 }).format(number);\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: [],\n      search:null\n    };  \n  }\n\n  searchSpace=(event)=>{\n    let keyword = event.target.value;\n    this.setState({search:keyword})\n  }\n\n  componentDidMount(){\n  \n    Promise.all([\n      fetch('api/branch1.json'),\n      fetch('api/branch2.json'),\n      fetch('api/branch3.json')\n    ]).then(function (responses) {\n      // Get a JSON object from each of the responses\n      return Promise.all(responses.map(function (response) {\n        return response.json();\n      }));\n    }).then(data => {\n      // Log the data to the console\n      // You would do something with both sets of data here\n        this.setState({ products: data });\n        console.log('data',data);\n        console.log('products',this.state.products);\n    }).catch(function (error) {\n      // if there's an error, log it\n      console.log('error',error);\n    });\n\n\n  }\n  \n  render() {\n    const products = this.state\n    const ProductTotal = products.products.filter((data)=>{\n              if(this.state.search == null)\n                return data\n              else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n                return data\n        }\n        }).reduce((totalProducts, product) => totalProducts + product.unitPrice, 0);\n    console.log('total',ProductTotal)\n\n    return (\n      <div class=\"product-list\">\n        <label>Search Products</label>\n        <input type=\"text\" onChange={(e)=>this.searchSpace(e)}/>\n        \n        <table>\n        <thead>\n          <tr>\n            <th>Product</th>\n            <th>Revenue</th>\n          </tr>\n        </thead>\n        <tbody>\n         \n        </tbody>\n        <tfoot>\n          <tr>\n            <td>Total</td>\n            <td>{ProductTotal}</td>\n          </tr>\n        </tfoot>\n      </table>\n     \n    {products.products.map((item, index) => (\n      <div key={index}>\n       \n        {item.products.map((c, i) => (\n          <tr key={i}>\n           \n            <td>{c.name}</td>\n            <td>{c.unitPrice}</td>\n            \n          </tr>\n        ))}\n      </div>\n    ))}\n\n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n\n // {\n          //   this.state.todos && \n          //   Object.keys(icon).map(function (element) {\n          //      return <tr>\n          //        <td>{element}</td>\n          //        <td>{icon[element]}</td>\n          //      </tr>;\n          //     })\n          // }\n          /////////////\n           // {products.products.map(image => <div>{image.name}</div>)}\n\n\n        //    .filter((data)=>{\n        //       if(this.state.search == null)\n        //         return data\n        //       else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n        //         return data\n        // }\n        // })."]},"metadata":{},"sourceType":"module"}